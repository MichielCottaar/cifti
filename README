This module allows for straight-forward creation of CIFTI files and the i/o of old ones

Each type of CIFTI axes describing the rows/columns in a CIFTI matrix is given a unique class:
- `BrainModel`: each row/column is a voxel or vertex
- `Parcels`: each row/column is a group of voxels and/or vertices
- `Series`: each row/column is a timepoint, which increases monotonically
- `Scalar`: each row/column has a unique name (with optional meta-data)
- `Label`: each row/column has a unique name and label table (with optional meta-data)
All of these classes are derived from `Axis`

IO to and from CIFTI files (through `load` and `save`) expects a matrix as well as a pair of axes objects describing the rows and columns of the matrix

Cifti axes of the same type can be concatenated by adding them together.
Numpy indexing also works on them (except for Series objects, which have to remain monotonically increasing or decreasing)

Installation
------------
This package relies on `nibabel` for reading/writing the CIFTI2 files. For now this is not even available yet in the nibabel master, so nibabel will have to be installed directly from the pull request by satra: https://github.com/nipy/nibabel/pull/249

Creating new CIFTI axes
-----------------------
Several helper functions exist to create new Cifti objects:
- BrainModel.from_mask creates a new BrainModel volume covering the non-zero values of a mask
- BrainModel.from_vertex creates a new BrainModel surface covering the provided indices of a surface
- Scalar.from_names creates a Cifti scalar axis based on a list of names (with no meta-data)
- Scalar.to_label converts a Cifti scalar axis into a Cifti Label axis given a label table

Examples
--------
So we can create brain models covering the left cortex and left thalamus using:
>>> import cifti
>>> bm_cortex = cifti.BrainModel.from_vertex(range(32492), nvertex=32492, structure='cortex_left')
>>> bm_thal = cifti.BrainModel.from_voxel(thalamus_mask, affine=affine, structure='thalamus_left')

These can be concatenated in a single brain model covering the left cortex and thalamus by simply adding them together
>>> bm_full = bm_cortex + bm_thal
Brain models covering the full HCP grayordinate space can be constructed by adding all the volumetric and surface brain models together like this

Getting a specific brain region from the full brain model is as simple as:
>>> assert bm_full[bm_full.struc == 'CortexLeft'] == bm_cortex
>>> assert bm_full[bm_full.struc == 'ThalamusLeft'] == bm_thal

You can also iterate over all brain structures in a brain model:
>>> for brain_model, structure in bm_full.iter_structures(): ...
In this case

Parcels are simply sub-selections of these brain models:
>>> parcel = cifti.Parcels([('surface_parcel', bm_cortex[:100]),  # parcel containing first 100 vertices of the left cortex
                            ('volume_parcel', bm_thal),  # cortex containing the full left thalamus
                            ('combined_parcel', bm_full[[1, 8, 10, 19, 50, 120, 127])  # parcel containing specific indices of the full brain model
                            ])

Time series are represented by their starting time (typically 0), step size (i.e. TR), and number of elements:
>>> series = cifti.Series(start=0, step=100, size=5000)

So fMRI data with a TR of 100 ms covering the left cortex and thalamus with 5000 timepoints could be stored with
>>> cifti.save('Lcortex_thal.dtseries.nii', fMRI_data, (series, bm_full))

Similarly the myelin and cortical thickness on the left cortex can be stored in a single Cifti file using
>>> cifti.save('Lvalues.dscalar.nii', [myelin, thickness], (cifti.Scalar.from_names(['myelin', 'thickness']), bm_full))

Any Cifti file can be read using
>>> arr, (axis1, axis2) = cifti.load('test_file.nii')
If the file is not zipped (default for CIFTI) `arr` will be a memory-mapped array, so it should be fast even for a dense connectome.
If the CIFTI file is zipped the full data will be loaded into memory, which might take a long time.


